import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  SafeAreaView,
  Alert,
  ActivityIndicator,
  Dimensions,
} from 'react-native';

const { width, height } = Dimensions.get('window');

const AIMenu = () => {
  const [activeTab, setActiveTab] = useState<string>('ask');
  const [selectedLanguage, setSelectedLanguage] = useState<string>('en');
  const [question, setQuestion] = useState<string>('');
  const [interests, setInterests] = useState<string[]>([]);
  const [messages, setMessages] = useState<any[]>([]);
  const [dreamPathResult, setDreamPathResult] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const GEMINI_API_KEY = 'AIzaSyBU66oGdzHauNYahWTaFFJ_sKV7POibyGY';

  const languages = {
    'en': 'English',
    'hi': 'рд╣рд┐рдВрджреА',
    'ta': 'родрооро┐ро┤рпН',
    'te': 'р░др▒Жр░▓р▒Бр░Чр▒Б',
    'ml': 'р┤ор┤▓р┤пр┤╛р┤│р┤В',
    'kn': 'р▓Хр▓ир│Нр▓ир▓б',
    'mr': 'рдорд░рд╛рдареА',
    'bn': 'ржмрж╛ржВрж▓рж╛',
    'gu': 'ркЧрлБркЬрк░рк╛ркдрлА',
    'or': 'рмУрмбрм╝рм┐рмЖ'
  };

  const interestOptions = [
    'Science', 'Technology', 'Art', 'Music', 'Sports', 'Writing', 
    'Mathematics', 'History', 'Languages', 'Medicine', 'Engineering', 
    'Teaching', 'Business', 'Environment', 'Animals', 'Space'
  ];

  const languagePrompts = {
    'en': {
      askPlaceholder: 'Ask me anything about careers and money! I\'ll explain simply...',
      dreamPathTitle: 'ЁЯТ░ Career Paths',
      selectInterests: 'ЁЯОп Choose interests to discover careers:',
      explainSimply: 'Explain this in very simple words that a child can understand',
      careerGuidance: `Based on these interests, provide 3 HIGH-EARNING career options with complete FINANCIAL BREAKDOWN:

      FOR EACH CAREER, PROVIDE:
      ЁЯТ░ SALARY DETAILS (in INR):
      - Starting salary (Fresh graduate): тВ╣XX,XXX per month
      - After 2 years: тВ╣XX,XXX per month  
      - After 5 years: тВ╣XX,XXX per month
      - Senior level (10+ years): тВ╣X,XX,XXX per month
      - TOP earning potential: тВ╣X,XX,XXX per month

      ЁЯПа LIFESTYLE BENEFITS:
      - Can afford: House/Car/Education for children
      - Social status: High/Medium respect in society
      - Job security: High/Medium/Low
      
      ЁЯТ╝ CORPORATE BENEFITS:
      - Medical insurance worth тВ╣X lakhs
      - Provident Fund (PF) contribution
      - Annual bonuses: X months salary
      - Free training/certifications worth тВ╣X lakhs
      - International travel opportunities

      ЁЯУЪ EDUCATION PATH (Step-by-step):
      - Required degree/diploma (exact course names)
      - Duration: X years
      - Average education cost: тВ╣X lakhs
      - ROI: Earn back education cost in X years

      ЁЯОУ FREE SCHOLARSHIPS:
      - Government schemes (exact names like PM Scholarship, Merit Scholarship)
      - Private company scholarships
      - How to apply (websites/process)

      ЁЯТ╗ SKILL DEVELOPMENT:
      - Online courses (Coursera/edX/SWAYAM - many FREE)
      - Industry certifications
      - Internship opportunities

      ЁЯПв TOP HIRING COMPANIES:
      - List of companies that pay highest salaries
      - Starting packages they offer
      - How to get placed there

      ЁЯМН INTERNATIONAL OPPORTUNITIES:
      - Countries with high demand
      - Salary in foreign countries (convert to INR)
      - Immigration pathways

      For Industrial Design specifically: Include salary range тВ╣25,000 (fresher) to тВ╣3,00,000+ (senior) per month, mention luxury brands, automotive companies, and product design firms that pay premium salaries.

      FORMAT: Use lots of emojis, clear sections, and emphasize MONEY and LIFESTYLE BENEFITS throughout. Make parents understand this is a path to PROSPERITY and FINANCIAL FREEDOM for their children.`,
      askAnything: 'ЁЯТм Ask About Money & Careers',
      generatePath: 'ЁЯТ░ Show Me High-Paying Careers',
      creating: 'ЁЯТ░ Finding High-Earning Career Paths...',
      thinking: 'ЁЯТн Calculating earning potential...',
      ask: 'Ask',
      selectAtLeastOne: 'тЪая╕П Select at least one interest to see earning opportunities!'
    },
    'hi': {
      askPlaceholder: 'рдХрд░рд┐рдпрд░ рдФрд░ рдкреИрд╕реЗ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ! рдореИрдВ рдЖрд╕рд╛рди рд╢рдмреНрджреЛрдВ рдореЗрдВ рд╕рдордЭрд╛рдКрдВрдЧрд╛...',
      dreamPathTitle: 'ЁЯТ░ рдЬреНрдпрд╛рджрд╛ рдкреИрд╕реЗ рдХрдорд╛рдиреЗ рд╡рд╛рд▓реЗ рдХрд░рд┐рдпрд░',
      selectInterests: 'ЁЯОп рдЕрдЪреНрдЫреА рд╕реИрд▓рд░реА рд╡рд╛рд▓реЗ рдХрд░рд┐рдпрд░ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рд░реБрдЪрд┐рдпрд╛рдВ рдЪреБрдиреЗрдВ:',
      explainSimply: 'рдЗрд╕реЗ рдмрд╣реБрдд рд╕рд░рд▓ рд╢рдмреНрджреЛрдВ рдореЗрдВ рд╕рдордЭрд╛рдПрдВ рдЬреЛ рдПрдХ рдмрдЪреНрдЪрд╛ рд╕рдордЭ рд╕рдХреЗ',
      careerGuidance: `рдЗрди рд░реБрдЪрд┐рдпреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдкреВрд░реНрдг рд╡рд┐рддреНрддреАрдп рд╡рд┐рд╡рд░рдг рдХреЗ рд╕рд╛рде 3 рдЙрдЪреНрдЪ рд╡реЗрддрди рд╡рд╛рд▓реЗ рдХрд░рд┐рдпрд░ рд╡рд┐рдХрд▓реНрдк рдкреНрд░рджрд╛рди рдХрд░реЗрдВ:

      рдкреНрд░рддреНрдпреЗрдХ рдХрд░рд┐рдпрд░ рдХреЗ рд▓рд┐рдП рджреЗрдВ:
      ЁЯТ░ рд╕реИрд▓рд░реА рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА (INR рдореЗрдВ):
      - рд╢реБрд░реБрдЖрддреА рд╕реИрд▓рд░реА (рдирдП рдЧреНрд░реЗрдЬреБрдПрдЯ): тВ╣XX,XXX рдкреНрд░рддрд┐ рдорд╛рд╣
      - 2 рд╕рд╛рд▓ рдмрд╛рдж: тВ╣XX,XXX рдкреНрд░рддрд┐ рдорд╛рд╣
      - 5 рд╕рд╛рд▓ рдмрд╛рдж: тВ╣XX,XXX рдкреНрд░рддрд┐ рдорд╛рд╣
      - рд╕реАрдирд┐рдпрд░ рд▓реЗрд╡рд▓ (10+ рд╕рд╛рд▓): тВ╣X,XX,XXX рдкреНрд░рддрд┐ рдорд╛рд╣
      - рдЕрдзрд┐рдХрддрдо рдХрдорд╛рдИ: тВ╣X,XX,XXX рдкреНрд░рддрд┐ рдорд╛рд╣

      ЁЯПа рдЬреАрд╡рдирд╢реИрд▓реА рдХреЗ рдлрд╛рдпрджреЗ:
      - рдЦрд░реАрдж рд╕рдХрддреЗ рд╣реИрдВ: рдШрд░/рдХрд╛рд░/рдмрдЪреНрдЪреЛрдВ рдХреА рд╢рд┐рдХреНрд╖рд╛
      - рд╕рдорд╛рдЬ рдореЗрдВ рдЗрдЬреНрдЬрдд: рдЙрдЪреНрдЪ/рдордзреНрдпрдо
      - рдиреМрдХрд░реА рдХреА рд╕реБрд░рдХреНрд╖рд╛: рдЙрдЪреНрдЪ/рдордзреНрдпрдо/рдХрдо

      ЁЯТ╝ рдХрдВрдкрдиреА рдХреЗ рдлрд╛рдпрджреЗ:
      - тВ╣X рд▓рд╛рдЦ рдХрд╛ рдореЗрдбрд┐рдХрд▓ рдЗрдВрд╢реНрдпреЛрд░реЗрдВрд╕
      - рдкреНрд░реЛрд╡рд┐рдбреЗрдВрдЯ рдлрдВрдб (PF)
      - рд╕рд╛рд▓рд╛рдирд╛ рдмреЛрдирд╕: X рдорд╣реАрдиреЗ рдХреА рд╕реИрд▓рд░реА
      - рдореБрдлреНрдд рдЯреНрд░реЗрдирд┐рдВрдЧ тВ╣X рд▓рд╛рдЦ рдХреА

      ЁЯУЪ рдкрдврд╝рд╛рдИ рдХрд╛ рд░рд╛рд╕реНрддрд╛:
      - рдЬрд░реВрд░реА рдбрд┐рдЧреНрд░реА/рдбрд┐рдкреНрд▓реЛрдорд╛
      - рд╕рдордп: X рд╕рд╛рд▓
      - рдкрдврд╝рд╛рдИ рдХреА рд▓рд╛рдЧрдд: тВ╣X рд▓рд╛рдЦ
      - ROI: X рд╕рд╛рд▓ рдореЗрдВ рдкрдврд╝рд╛рдИ рдХрд╛ рдкреИрд╕рд╛ рд╡рд╛рдкрд╕

      ЁЯОУ рдореБрдлреНрдд рд╕реНрдХреЙрд▓рд░рд╢рд┐рдк:
      - рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ (PM Scholarship рдЖрджрд┐)
      - рдЖрд╡реЗрджрди рдХреИрд╕реЗ рдХрд░реЗрдВ

      ЁЯПв рдЯреЙрдк рдХрдВрдкрдирд┐рдпрд╛рдВ:
      - рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╕реИрд▓рд░реА рджреЗрдиреЗ рд╡рд╛рд▓реА рдХрдВрдкрдирд┐рдпрд╛рдВ
      - рд╡реЗ рдХрд┐рддрдиреА рд╕реИрд▓рд░реА рджреЗрддреА рд╣реИрдВ

      ЁЯМН рд╡рд┐рджреЗрд╢ рдореЗрдВ рдиреМрдХрд░реА:
      - рдХреМрди рд╕реЗ рджреЗрд╢ рдореЗрдВ рдЬреНрдпрд╛рджрд╛ рдорд╛рдВрдЧ
      - рд╡рд┐рджреЗрд╢реА рд╕реИрд▓рд░реА (INR рдореЗрдВ)

      рдЗрдореЛрдЬреА рдФрд░ рд╕реНрдкрд╖реНрдЯ рд╕реЗрдХреНрд╢рди рдХреЗ рд╕рд╛рде рдлреЙрд░реНрдореЗрдЯ рдХрд░реЗрдВред рдорд╛рддрд╛-рдкрд┐рддрд╛ рдХреЛ рд╕рдордЭрд╛рдПрдВ рдХрд┐ рдпрд╣ рдЙрдирдХреЗ рдмрдЪреНрдЪреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рдореГрджреНрдзрд┐ рдФрд░ рд╡рд┐рддреНрддреАрдп рд╕реНрд╡рддрдВрддреНрд░рддрд╛ рдХрд╛ рд░рд╛рд╕реНрддрд╛ рд╣реИред`,
      askAnything: 'ЁЯТм рдкреИрд╕реЗ рдФрд░ рдХрд░рд┐рдпрд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ',
      generatePath: 'ЁЯТ░ рдЕрдЪреНрдЫреА рд╕реИрд▓рд░реА рд╡рд╛рд▓реЗ рдХрд░рд┐рдпрд░ рджрд┐рдЦрд╛рдПрдВ',
      creating: 'ЁЯТ░ рдЕрдЪреНрдЫреЗ рдХрд░рд┐рдпрд░ рдЦреЛрдЬреЗ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ...',
      thinking: 'ЁЯТн рдХрдорд╛рдИ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рджреЗрдЦ рд░рд╣реЗ рд╣реИрдВ...',
      ask: 'рдкреВрдЫреЗрдВ',
      selectAtLeastOne: 'тЪая╕П рдХрдорд╛рдИ рдХреЗ рдЕрд╡рд╕рд░ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдХрдо рд╕реЗ рдХрдо рдПрдХ рд░реБрдЪрд┐ рдЪреБрдиреЗрдВ!'
    },
    'ta': {
      askPlaceholder: 'родрпКро┤ро┐ро▓рпН рооро▒рпНро▒рпБроорпН рокрогродрпНродрпИрокрпН рокро▒рпНро▒ро┐ роОродрпИропрпБроорпН роХрпЗро│рпБроЩрпНроХро│рпН! роОро│ро┐роорпИропро╛роХ ро╡ро┐ро│роХрпНроХрпБроХро┐ро▒рпЗройрпН...',
      dreamPathTitle: 'ЁЯТ░ роЕродро┐роХ роЪроорпНрокро│роорпН родро░рпБроорпН родрпКро┤ро┐ро▓рпНроХро│рпН',
      selectInterests: 'ЁЯОп роиро▓рпНро▓ роЪроорпНрокро│роорпН родро░рпБроорпН родрпКро┤ро┐ро▓рпНроХро│рпИ роЕро▒ро┐роп роЖро░рпНро╡роЩрпНроХро│рпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:',
      explainSimply: 'роЗродрпИ роТро░рпБ роХрпБро┤роирпНродрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│роХрпНроХрпВроЯро┐роп рооро┐роХ роОро│ро┐роп ро╡ро╛ро░рпНродрпНродрпИроХро│ро┐ро▓рпН ро╡ро┐ро│роХрпНроХро╡рпБроорпН',
      careerGuidance: `роЗроирпНрод роЖро░рпНро╡роЩрпНроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роорпБро┤рпБроорпИропро╛рой роиро┐родро┐ ро╡ро┐ро╡ро░роЩрпНроХро│рпБроЯройрпН 3 роЕродро┐роХ ро╡ро░рпБрооро╛ройроорпН родро░рпБроорпН родрпКро┤ро┐ро▓рпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН:

      роТро╡рпНро╡рпКро░рпБ родрпКро┤ро┐ро▓рпБроХрпНроХрпБроорпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН:
      ЁЯТ░ роЪроорпНрокро│ ро╡ро┐ро╡ро░роЩрпНроХро│рпН (INR роЗро▓рпН):
      - роЖро░роорпНрок роЪроорпНрокро│роорпН (рокрпБродро┐роп рокроЯрпНроЯродро╛ро░ро┐): рооро╛родроорпН тВ╣XX,XXX
      - 2 ро╡ро░рпБроЯроЩрпНроХро│рпН роХро┤ро┐родрпНродрпБ: рооро╛родроорпН тВ╣XX,XXX  
      - 5 ро╡ро░рпБроЯроЩрпНроХро│рпН роХро┤ро┐родрпНродрпБ: рооро╛родроорпН тВ╣XX,XXX
      - роорпВродрпНрод роиро┐ро▓рпИ (10+ ро╡ро░рпБроЯроЩрпНроХро│рпН): рооро╛родроорпН тВ╣X,XX,XXX
      - роЕродро┐роХрокроЯрпНроЪ ро╡ро░рпБрооро╛ройроорпН: рооро╛родроорпН тВ╣X,XX,XXX

      ЁЯПа ро╡ро╛ро┤рпНроХрпНроХрпИ роорпБро▒рпИ роиройрпНроорпИроХро│рпН:
      - ро╡ро╛роЩрпНроХ роорпБроЯро┐ропрпБроорпН: ро╡рпАроЯрпБ/роХро╛ро░рпН/роХрпБро┤роирпНродрпИроХро│ро┐ройрпН роХро▓рпНро╡ро┐
      - роЪроорпВроХ роЕроирпНродро╕рпНродрпБ: роЙропро░рпН/роироЯрпБродрпНродро░ рооро░ро┐ропро╛родрпИ
      - ро╡рпЗро▓рпИ рокро╛родрпБроХро╛рокрпНрокрпБ: роЕродро┐роХ/роироЯрпБродрпНродро░/роХрпБро▒рпИроирпНрод

      ЁЯТ╝ роиро┐ро▒рпБро╡рой роиройрпНроорпИроХро│рпН:
      - тВ╣X ро▓роЯрпНроЪроорпН роородро┐рокрпНрокро┐ро▓ро╛рой рооро░рпБродрпНродрпБро╡ роХро╛рокрпНрокрпАроЯрпБ
      - роЪрпЗроороиро▓ роиро┐родро┐ (PF) рокроЩрпНроХро│ро┐рокрпНрокрпБ
      - ро╡ро░рпБроЯро╛роирпНродро┐ро░ рокрпЛройро╕рпН: X рооро╛род роЪроорпНрокро│роорпН
      - роЗро▓ро╡роЪ рокропро┐ро▒рпНроЪро┐ тВ╣X ро▓роЯрпНроЪроорпН роородро┐рокрпНрокрпБ

      ЁЯУЪ роХро▓рпНро╡ро┐рокрпН рокро╛родрпИ:
      - родрпЗро╡рпИропро╛рой рокроЯрпНроЯроорпН/роЯро┐рокрпНро│рпЛрооро╛
      - роХро╛ро▓роорпН: X роЖрогрпНроЯрпБроХро│рпН
      - роХро▓рпНро╡ро┐ роЪрпЖро▓ро╡рпБ: тВ╣X ро▓роЯрпНроЪроорпН
      - ROI: X ро╡ро░рпБроЯроЩрпНроХро│ро┐ро▓рпН роХро▓рпНро╡ро┐ роЪрпЖро▓ро╡рпБ родро┐ро░рпБроорпНрокрпБроорпН

      ЁЯОУ роЗро▓ро╡роЪ роЙродро╡ро┐родрпНродрпКроХрпИроХро│рпН:
      - роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН (PM Scholarship рокрпЛройрпНро▒ро╡рпИ)
      - ро╡ро┐рогрпНрогрокрпНрокро┐роХрпНроХрпБроорпН роорпБро▒рпИ

      ЁЯПв роЪро┐ро▒роирпНрод роиро┐ро▒рпБро╡ройроЩрпНроХро│рпН:
      - роЕродро┐роХ роЪроорпНрокро│роорпН родро░рпБроорпН роиро┐ро▒рпБро╡ройроЩрпНроХро│рпН
      - роЕро╡рпИ родро░рпБроорпН родрпКроЯроХрпНроХ роЪроорпНрокро│роорпН

      ЁЯМН ро╡рпЖро│ро┐роиро╛роЯрпНроЯрпБ ро╡ро╛ропрпНрокрпНрокрпБроХро│рпН:
      - роЕродро┐роХ родрпЗро╡рпИропрпБро│рпНро│ роиро╛роЯрпБроХро│рпН
      - ро╡рпЖро│ро┐роиро╛роЯрпНроЯрпБ роЪроорпНрокро│роорпН (INR роЗро▓рпН)

      роОроорпЛроЬро┐ рооро▒рпНро▒рпБроорпН родрпЖро│ро┐ро╡ро╛рой рокро┐ро░ро┐ро╡рпБроХро│рпБроЯройрпН ро╡роЯро┐ро╡роорпИроХрпНроХро╡рпБроорпН. рокрпЖро▒рпНро▒рпЛро░рпБроХрпНроХрпБ роЗродрпБ роЕро╡ро░рпНроХро│ро┐ройрпН роХрпБро┤роирпНродрпИроХро│рпБроХрпНроХрпБ роЪрпЖро▓рпНро╡роорпН рооро▒рпНро▒рпБроорпН роиро┐родро┐ роЪрпБродроирпНродро┐ро░родрпНродро┐ройрпН рокро╛родрпИ роОройрпНро▒рпБ рокрпБро░ро┐ропро╡рпИроХрпНроХро╡рпБроорпН.`,
      askAnything: 'ЁЯТм рокрогроорпН рооро▒рпНро▒рпБроорпН родрпКро┤ро┐ро▓рпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН',
      generatePath: 'ЁЯТ░ роЕродро┐роХ роЪроорпНрокро│ родрпКро┤ро┐ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБ',
      creating: 'ЁЯТ░ роЕродро┐роХ ро╡ро░рпБрооро╛рой родрпКро┤ро┐ро▓рпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роХро┐ро▒рпЛроорпН...',
      thinking: 'ЁЯТн роЪроорпНрокро╛родро┐роХрпНроХрпБроорпН родро┐ро▒ройрпИроХрпН роХрогроХрпНроХро┐роЯрпБроХро┐ро▒рпЛроорпН...',
      ask: 'роХрпЗро│рпН',
      selectAtLeastOne: 'тЪая╕П роЪроорпНрокро╛родро┐роХрпНроХрпБроорпН ро╡ро╛ропрпНрокрпНрокрпБроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХ роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН роТро░рпБ роЖро░рпНро╡родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН!'
    }
  };

  // Language Picker Component
  const LanguagePicker = () => {
    const [showPicker, setShowPicker] = useState(false);
    
    return (
      <View style={styles.languageContainer}>
        <Text style={styles.languageLabel}>ЁЯМН рднрд╛рд╖рд╛ | Language | роорпКро┤ро┐:</Text>
        <TouchableOpacity
          style={styles.languageButton}
          onPress={() => setShowPicker(!showPicker)}
        >
          <Text style={styles.languageButtonText}>{languages[selectedLanguage]}</Text>
          <Text style={styles.dropdownIcon}>{showPicker ? 'тЦ▓' : 'тЦ╝'}</Text>
        </TouchableOpacity>
        
        {showPicker && (
          <View style={styles.languageDropdown}>
            <ScrollView style={styles.languageOptions} nestedScrollEnabled={true}>
              {Object.entries(languages).map(([code, name]) => (
                <TouchableOpacity
                  key={code}
                  style={[
                    styles.languageOption,
                    selectedLanguage === code && styles.selectedLanguageOption
                  ]}
                  onPress={() => {
                    setSelectedLanguage(code);
                    setShowPicker(false);
                  }}
                >
                  <Text style={[
                    styles.languageOptionText,
                    selectedLanguage === code && styles.selectedLanguageOptionText
                  ]}>
                    {name}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        )}
      </View>
    );
  };

  const callGeminiAPI = async (prompt, isCareerGuidance = false) => {
    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: isCareerGuidance ? 3000 : 1024,
          }
        })
      });

      const data = await response.json();
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        return data.candidates[0].content.parts[0].text;
      } else {
        throw new Error('Invalid response from API');
      }
    } catch (error) {
      console.error('API Error:', error);
      return 'Sorry, I encountered an error. Please try again!';
    }
  };

  const askQuestion = async () => {
    if (!question.trim()) return;

    setIsLoading(true);
    const userMessage = { type: 'user', text: question, timestamp: Date.now() };
    setMessages(prev => [...prev, userMessage]);

    const prompts = languagePrompts[selectedLanguage] || languagePrompts['en'];
    const prompt = `${prompts.explainSimply}: "${question}". Focus on practical benefits and earning opportunities. Please respond in ${languages[selectedLanguage]} language.`;
    
    const response = await callGeminiAPI(prompt);
    
    const aiMessage = { type: 'ai', text: response, timestamp: Date.now() };
    setMessages(prev => [...prev, aiMessage]);
    setQuestion('');
    setIsLoading(false);
  };

  const generateDreamPath = async () => {
    if (interests.length === 0) {
      const prompts = languagePrompts[selectedLanguage] || languagePrompts['en'];
      Alert.alert('ЁЯТ░ Missing Information', prompts.selectAtLeastOne);
      return;
    }

    setIsLoading(true);
    const prompts = languagePrompts[selectedLanguage] || languagePrompts['en'];
    const prompt = `${prompts.careerGuidance} Selected interests: [${interests.join(', ')}]. Please respond in ${languages[selectedLanguage]} language.`;
    
    const response = await callGeminiAPI(prompt, true);
    setDreamPathResult(response);
    setIsLoading(false);
  };

  const toggleInterest = (interest) => {
    setInterests(prev => 
      prev.includes(interest) 
        ? prev.filter(i => i !== interest)
        : [...prev, interest]
    );
  };

  const prompts = languagePrompts[selectedLanguage] || languagePrompts['en'];

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.title}>ЁЯТ░ AI Mentor</Text>
          <Text style={styles.subtitle}>
            ЁЯЪА Your guide to HIGH-PAYING careers and FINANCIAL SUCCESS! ЁЯТО
          </Text>
          <View style={styles.moneyBadge}>
            <Text style={styles.moneyBadgeText}>ЁЯТ╡ Discover careers that pay тВ╣50,000 - тВ╣5,00,000+ per month! ЁЯТ╡</Text>
          </View>
        </View>

        {/* Language Selector */}
        <LanguagePicker />

        {/* Navigation Tabs */}
        <View style={styles.tabContainer}>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'ask' && styles.activeTab]}
            onPress={() => setActiveTab('ask')}
          >
            <Text style={[styles.tabText, activeTab === 'ask' && styles.activeTabText]}>
              {prompts.askAnything}
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tab, activeTab === 'dream' && styles.activeTab]}
            onPress={() => setActiveTab('dream')}
          >
            <Text style={[styles.tabText, activeTab === 'dream' && styles.activeTabText]}>
              ЁЯТ░ Career Paths
            </Text>
          </TouchableOpacity>
        </View>

        {/* Ask Me Anything Tab */}
        {activeTab === 'ask' && (
          <View style={styles.tabContent}>
            <View style={styles.inputContainer}>
              <View style={styles.inputHeader}>
                
              </View>
              <TextInput
                style={styles.textInput}
                value={question}
                onChangeText={setQuestion}
                placeholder={prompts.askPlaceholder}
                placeholderTextColor="#666"
                multiline
                textAlignVertical="top"
              />
              <TouchableOpacity
                style={[styles.sendButton, (!question.trim() || isLoading) && styles.disabledButton]}
                onPress={askQuestion}
                disabled={!question.trim() || isLoading}
              >
                {isLoading ? (
                  <View style={styles.loadingContainer}>
                    <ActivityIndicator color="#ffffff" size="small" />
                    <Text style={styles.sendButtonText}> {prompts.thinking}</Text>
                  </View>
                ) : (
                  <Text style={styles.sendButtonText}>ЁЯТл {prompts.ask}</Text>
                )}
              </TouchableOpacity>
            </View>

            <View style={styles.messagesContainer}>
              {messages.length === 0 ? (
                <View style={styles.emptyContainer}>
                  <Text style={styles.emptyText}>
                    ЁЯСЛ Hi! Ask me about careers that can make you RICH! ЁЯТ░
                    {'\n\n'}Examples:
                    {'\n'}тАв "Which engineering job pays the most?"
                    {'\n'}тАв "How much do doctors earn?"
                    {'\n'}тАв "Best business careers for money?"
                  </Text>
                </View>
              ) : (
                <ScrollView showsVerticalScrollIndicator={false}>
                  {messages.map((message) => (
                    <View
                      key={message.timestamp}
                      style={[
                        styles.messageWrapper,
                        message.type === 'user' ? styles.userMessageWrapper : styles.aiMessageWrapper
                      ]}
                    >
                      <View
                        style={[
                          styles.messageContainer,
                          message.type === 'user' ? styles.userMessage : styles.aiMessage
                        ]}
                      >
                        <Text style={[
                          styles.messageText,
                          { color: message.type === 'user' ? '#ffffff' : '#1F2937' }
                        ]}>
                          {message.text}
                        </Text>
                      </View>
                    </View>
                  ))}
                  {isLoading && (
                    <View style={styles.aiMessageWrapper}>
                      <View style={styles.aiMessage}>
                        <View style={styles.typingIndicator}>
                          <Text style={styles.loadingText}>{prompts.thinking}</Text>
                          <ActivityIndicator color="#059669" style={{ marginLeft: 8 }} />
                        </View>
                      </View>
                    </View>
                  )}
                </ScrollView>
              )}
            </View>
          </View>
        )}

        {/* Dream Path Tab */}
        {activeTab === 'dream' && (
          <View style={styles.tabContent}>
            <Text style={styles.dreamPathTitle}>ЁЯТО {prompts.dreamPathTitle}</Text>
            <Text style={styles.selectInterestsText}>{prompts.selectInterests}</Text>
            
            <View style={styles.interestsGrid}>
              {interestOptions.map((interest) => (
                <TouchableOpacity
                  key={interest}
                  style={[
                    styles.interestButton,
                    interests.includes(interest) && styles.selectedInterest
                  ]}
                  onPress={() => toggleInterest(interest)}
                >
                  <Text style={[
                    styles.interestButtonText,
                    interests.includes(interest) && styles.selectedInterestText
                  ]}>
                    {interests.includes(interest) ? 'тЬУ ' : ''}ЁЯТ╝ {interest}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            <TouchableOpacity
              style={[styles.generateButton, (isLoading || interests.length === 0) && styles.disabledButton]}
              onPress={generateDreamPath}
              disabled={isLoading || interests.length === 0}
            >
              {isLoading ? (
                <View style={styles.loadingContainer}>
                  <ActivityIndicator color="#ffffff" size="small" />
                  <Text style={styles.generateButtonText}> {prompts.creating}</Text>
                </View>
              ) : (
                <Text style={styles.generateButtonText}>
                  ЁЯТ░ {prompts.generatePath}
                </Text>
              )}
            </TouchableOpacity>

            {dreamPathResult && (
              <View style={styles.resultContainer}>
                <Text style={styles.resultTitle}>ЁЯТ░ YOUR CAREER BLUEPRINT</Text>
                <View style={styles.salaryHighlight}>
                  <Text style={styles.salaryHighlightText}>
                    ЁЯОп Potential Monthly Earnings: тВ╣50,000 - тВ╣5,00,000+
                  </Text>
                </View>
                <ScrollView style={styles.resultScroll} nestedScrollEnabled={true}>
                  <View style={styles.colorfulResultContainer}>
                    <Text style={styles.resultText}>{dreamPathResult}</Text>
                  </View>
                </ScrollView>
                
              </View>
            )}
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F0FDF4',
  },
  header: {
    alignItems: 'center',
    paddingVertical: 24,
    paddingHorizontal: 16,
    backgroundColor: 'linear-gradient(135deg, #059669 0%, #10B981 100%)',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#065F46',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#047857',
    textAlign: 'center',
    fontWeight: '600',
    marginBottom: 12,
  },
  moneyBadge: {
    backgroundColor: '#FEF3C7',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderWidth: 2,
    borderColor: '#F59E0B',
  },
  moneyBadgeText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#92400E',
    textAlign: 'center',
  },
  languageContainer: {
    alignItems: 'center',
    paddingHorizontal: 16,
    marginBottom: 16,
    zIndex: 1000,
  },
  languageLabel: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    color: '#065F46',
  },
  languageButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#10B981',
    paddingHorizontal: 20,
    paddingVertical: 12,
    minWidth: 180,
    justifyContent: 'space-between',
    shadowColor: '#059669',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  languageButtonText: {
    fontSize: 16,
    color: '#065F46',
    fontWeight: '600',
  },
  dropdownIcon: {
    fontSize: 12,
    color: '#059669',
    fontWeight: 'bold',
  },
  languageDropdown: {
    position: 'absolute',
    top: 60,
    left: 16,
    right: 16,
    backgroundColor: '#ffffff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    maxHeight: 200,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  languageOptions: {
    maxHeight: 200,
  },
  languageOption: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  selectedLanguageOption: {
    backgroundColor: '#EBF8FF',
  },
  languageOptionText: {
    fontSize: 16,
    color: '#374151',
  },
  selectedLanguageOptionText: {
    color: '#2563EB',
    fontWeight: '600',
  },
  tabContainer: {
    flexDirection: 'row',
    marginHorizontal: 16,
    backgroundColor: '#ffffff',
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  tab: {
    flex: 1,
    paddingVertical: 16,
    paddingHorizontal: 8,
    alignItems: 'center',
    borderRadius: 12,
  },
  activeTab: {
    backgroundColor: '#4F46E5',
  },
  tabText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6B7280',
    textAlign: 'center',
  },
  activeTabText: {
    color: '#ffffff',
  },
  tabContent: {
    flex: 1,
    paddingHorizontal: 16,
    paddingBottom: 20,
  },
  inputContainer: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  textInput: {
    borderWidth: 2,
    borderColor: '#E5E7EB',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    marginBottom: 12,
    minHeight: 50,
    maxHeight: 120,
  },
  sendButton: {
    backgroundColor: '#2563EB',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 24,
    alignItems: 'center',
  },
  disabledButton: {
    backgroundColor: '#9CA3AF',
  },
  sendButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  messagesContainer: {
    minHeight: 200,
    maxHeight: 400,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyText: {
    fontSize: 18,
    color: '#6B7280',
    textAlign: 'center',
    paddingHorizontal: 20,
  },
  messageWrapper: {
    marginBottom: 12,
  },
  userMessageWrapper: {
    alignItems: 'flex-end',
  },
  aiMessageWrapper: {
    alignItems: 'flex-start',
  },
  messageContainer: {
    maxWidth: '85%',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 18,
  },
  userMessage: {
    backgroundColor: '#2563EB',
    borderBottomRightRadius: 4,
  },
  aiMessage: {
    backgroundColor: '#F3F4F6',
    borderBottomLeftRadius: 4,
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  typingIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#6B7280',
  },
  dreamPathTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#7C3AED',
    marginBottom: 16,
    textAlign: 'center',
  },
  selectInterestsText: {
    fontSize: 16,
    color: '#6B7280',
    marginBottom: 16,
    textAlign: 'center',
  },
  interestsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 24,
  },
  interestButton: {
    width: (width - 48) / 2 - 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#DDD6FE',
    backgroundColor: '#ffffff',
    marginBottom: 12,
    alignItems: 'center',
  },
  selectedInterest: {
    backgroundColor: '#7C3AED',
    borderColor: '#7C3AED',
  },
  interestButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#7C3AED',
    textAlign: 'center',
  },
  selectedInterestText: {
    color: '#ffffff',
  },
  generateButton: {
    backgroundColor: '#059669',
    borderRadius: 16,
    paddingVertical: 18,
    alignItems: 'center',
    marginBottom: 24,
    shadowColor: '#059669',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
    borderWidth: 2,
    borderColor: '#10B981',
  },
  generateButtonText: {
    color: '#ffffff',
    fontSize: 18,
    fontWeight: 'bold',
    textShadowColor: '#047857',
    textShadowOffset: {
      width: 1,
      height: 1,
    },
    textShadowRadius: 2,
  },
  resultContainer: {
    backgroundColor: '#FDF4FF',
    borderRadius: 12,
    padding: 16,
    borderWidth: 2,
    borderColor: '#DDD6FE',
    marginBottom: 24,
  },
  resultTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#7C3AED',
    marginBottom: 12,
  },
  resultScroll: {
    maxHeight: 300,
  },
  resultText: {
    fontSize: 16,
    color: '#374151',
    lineHeight: 24,
  },
});

export default AIMenu;